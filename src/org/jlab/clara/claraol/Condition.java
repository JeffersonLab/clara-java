/*
 *   Copyright (c) 2016.  Jefferson Lab (JLab). All rights reserved. Permission
 *   to use, copy, modify, and distribute  this software and its documentation for
 *   educational, research, and not-for-profit purposes, without fee and without a
 *   signed licensing agreement.
 *
 *   IN NO EVENT SHALL JLAB BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL
 *   INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING
 *   OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF JLAB HAS
 *   BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *   JLAB SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 *   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *   PURPOSE. THE CLARA SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY,
 *   PROVIDED HEREUNDER IS PROVIDED "AS IS". JLAB HAS NO OBLIGATION TO PROVIDE
 *   MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 *
 *   This software was developed under the United States Government license.
 *   For more information contact author at gurjyan@jlab.org
 *   Department of Experimental Nuclear Physics, Jefferson Lab.
 */

package org.jlab.clara.claraol;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

import java.util.Collection;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: Condition <br>
 * @version generated on Sat Jan 30 17:43:59 EST 2016 by gurjyan
 */

public interface Condition extends WrappedIndividual {

    /* ***************************************************
     * Property http://claraweb.jlab.org/ontology/2015/11/ClaraOL#executionState
     */
     
    /**
     * Gets all property values for the executionState property.<p>
     * 
     * @return a collection of values for the executionState property.
     */
    Collection<? extends State> getExecutionState();

    /**
     * Checks if the class has a executionState property value.<p>
     * 
     * @return true if there is a executionState property value.
     */
    boolean hasExecutionState();

    /**
     * Adds a executionState property value.<p>
     * 
     * @param newExecutionState the executionState property value to be added
     */
    void addExecutionState(State newExecutionState);

    /**
     * Removes a executionState property value.<p>
     * 
     * @param oldExecutionState the executionState property value to be removed.
     */
    void removeExecutionState(State oldExecutionState);


    /* ***************************************************
     * Property http://claraweb.jlab.org/ontology/2015/11/ClaraOL#ifFalseSend
     */
     
    /**
     * Gets all property values for the ifFalseSend property.<p>
     * 
     * @return a collection of values for the ifFalseSend property.
     */
    Collection<? extends Service> getIfFalseSend();

    /**
     * Checks if the class has a ifFalseSend property value.<p>
     * 
     * @return true if there is a ifFalseSend property value.
     */
    boolean hasIfFalseSend();

    /**
     * Adds a ifFalseSend property value.<p>
     * 
     * @param newIfFalseSend the ifFalseSend property value to be added
     */
    void addIfFalseSend(Service newIfFalseSend);

    /**
     * Removes a ifFalseSend property value.<p>
     * 
     * @param oldIfFalseSend the ifFalseSend property value to be removed.
     */
    void removeIfFalseSend(Service oldIfFalseSend);


    /* ***************************************************
     * Property http://claraweb.jlab.org/ontology/2015/11/ClaraOL#ifTrueSend
     */
     
    /**
     * Gets all property values for the ifTrueSend property.<p>
     * 
     * @return a collection of values for the ifTrueSend property.
     */
    Collection<? extends Service> getIfTrueSend();

    /**
     * Checks if the class has a ifTrueSend property value.<p>
     * 
     * @return true if there is a ifTrueSend property value.
     */
    boolean hasIfTrueSend();

    /**
     * Adds a ifTrueSend property value.<p>
     * 
     * @param newIfTrueSend the ifTrueSend property value to be added
     */
    void addIfTrueSend(Service newIfTrueSend);

    /**
     * Removes a ifTrueSend property value.<p>
     * 
     * @param oldIfTrueSend the ifTrueSend property value to be removed.
     */
    void removeIfTrueSend(Service oldIfTrueSend);


    /* ***************************************************
     * Property http://claraweb.jlab.org/ontology/2015/11/ClaraOL#receivedState
     */
     
    /**
     * Gets all property values for the receivedState property.<p>
     * 
     * @return a collection of values for the receivedState property.
     */
    Collection<? extends State> getReceivedState();

    /**
     * Checks if the class has a receivedState property value.<p>
     * 
     * @return true if there is a receivedState property value.
     */
    boolean hasReceivedState();

    /**
     * Adds a receivedState property value.<p>
     * 
     * @param newReceivedState the receivedState property value to be added
     */
    void addReceivedState(State newReceivedState);

    /**
     * Removes a receivedState property value.<p>
     * 
     * @param oldReceivedState the receivedState property value to be removed.
     */
    void removeReceivedState(State oldReceivedState);


    /* ***************************************************
     * Property http://claraweb.jlab.org/ontology/2015/11/ClaraOL#logicalRelationship
     */
     
    /**
     * Gets all property values for the logicalRelationship property.<p>
     * 
     * @return a collection of values for the logicalRelationship property.
     */
    Collection<? extends String> getLogicalRelationship();

    /**
     * Checks if the class has a logicalRelationship property value.<p>
     * 
     * @return true if there is a logicalRelationship property value.
     */
    boolean hasLogicalRelationship();

    /**
     * Adds a logicalRelationship property value.<p>
     * 
     * @param newLogicalRelationship the logicalRelationship property value to be added
     */
    void addLogicalRelationship(String newLogicalRelationship);

    /**
     * Removes a logicalRelationship property value.<p>
     * 
     * @param oldLogicalRelationship the logicalRelationship property value to be removed.
     */
    void removeLogicalRelationship(String oldLogicalRelationship);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
