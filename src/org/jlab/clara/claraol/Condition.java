/*
 * Copyright (C) 2015. Jefferson Lab, CLARA framework (JLAB). All Rights Reserved.
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for educational, research, and not-for-profit purposes,
 * without fee and without a signed licensing agreement.
 *
 * Contact Vardan Gyurjyan
 * Department of Experimental Nuclear Physics, Jefferson Lab.
 *
 * IN NO EVENT SHALL JLAB BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL,
 * INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF
 * THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF JLAB HAS BEEN ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * JLAB SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE. THE CLARA SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY, PROVIDED
 * HEREUNDER IS PROVIDED "AS IS". JLAB HAS NO OBLIGATION TO PROVIDE MAINTENANCE,
 * SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 */

package org.jlab.clara.claraol;


import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: Condition <br>
 * @version generated on Tue Dec 22 14:51:01 EST 2015 by gurjyan
 */

public interface Condition extends WrappedIndividual {

    /* ***************************************************
     * Property http://claraweb.jlab.org/ontology/2015/11/ClaraOL#executionState
     */
     
    /**
     * Gets all property values for the executionState property.<p>
     * 
     * @returns a collection of values for the executionState property.
     */
    Collection<? extends State> getExecutionState();

    /**
     * Checks if the class has a executionState property value.<p>
     * 
     * @return true if there is a executionState property value.
     */
    boolean hasExecutionState();

    /**
     * Adds a executionState property value.<p>
     * 
     * @param newExecutionState the executionState property value to be added
     */
    void addExecutionState(State newExecutionState);

    /**
     * Removes a executionState property value.<p>
     * 
     * @param oldExecutionState the executionState property value to be removed.
     */
    void removeExecutionState(State oldExecutionState);


    /* ***************************************************
     * Property http://claraweb.jlab.org/ontology/2015/11/ClaraOL#receivedState
     */
     
    /**
     * Gets all property values for the receivedState property.<p>
     * 
     * @returns a collection of values for the receivedState property.
     */
    Collection<? extends State> getReceivedState();

    /**
     * Checks if the class has a receivedState property value.<p>
     * 
     * @return true if there is a receivedState property value.
     */
    boolean hasReceivedState();

    /**
     * Adds a receivedState property value.<p>
     * 
     * @param newReceivedState the receivedState property value to be added
     */
    void addReceivedState(State newReceivedState);

    /**
     * Removes a receivedState property value.<p>
     * 
     * @param oldReceivedState the receivedState property value to be removed.
     */
    void removeReceivedState(State oldReceivedState);


    /* ***************************************************
     * Property http://claraweb.jlab.org/ontology/2015/11/ClaraOL#logicalRelationship
     */
     
    /**
     * Gets all property values for the logicalRelationship property.<p>
     * 
     * @returns a collection of values for the logicalRelationship property.
     */
    Collection<? extends Object> getLogicalRelationship();

    /**
     * Checks if the class has a logicalRelationship property value.<p>
     * 
     * @return true if there is a logicalRelationship property value.
     */
    boolean hasLogicalRelationship();

    /**
     * Adds a logicalRelationship property value.<p>
     * 
     * @param newLogicalRelationship the logicalRelationship property value to be added
     */
    void addLogicalRelationship(Object newLogicalRelationship);

    /**
     * Removes a logicalRelationship property value.<p>
     * 
     * @param oldLogicalRelationship the logicalRelationship property value to be removed.
     */
    void removeLogicalRelationship(Object oldLogicalRelationship);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
