/*
 * Copyright (C) 2015. Jefferson Lab, CLARA framework (JLAB). All Rights Reserved.
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for educational, research, and not-for-profit purposes,
 * without fee and without a signed licensing agreement.
 *
 * Contact Vardan Gyurjyan
 * Department of Experimental Nuclear Physics, Jefferson Lab.
 *
 * IN NO EVENT SHALL JLAB BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL,
 * INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF
 * THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF JLAB HAS BEEN ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * JLAB SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE. THE CLARA SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY, PROVIDED
 * HEREUNDER IS PROVIDED "AS IS". JLAB HAS NO OBLIGATION TO PROVIDE MAINTENANCE,
 * SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 */

package org.jlab.clara.claraol;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: Service <br>
 * @version generated on Tue Dec 22 14:51:01 EST 2015 by gurjyan
 */

public interface Service extends WrappedIndividual {

    /* ***************************************************
     * Property http://claraweb.jlab.org/ontology/2015/11/ClaraOL#hasEngine
     */
     
    /**
     * Gets all property values for the hasEngine property.<p>
     * 
     * @return a collection of values for the hasEngine property.
     */
    Collection<? extends Engine> getHasEngine();

    /**
     * Checks if the class has a hasEngine property value.<p>
     * 
     * @return true if there is a hasEngine property value.
     */
    boolean hasHasEngine();

    /**
     * Adds a hasEngine property value.<p>
     * 
     * @param newHasEngine the hasEngine property value to be added
     */
    void addHasEngine(Engine newHasEngine);

    /**
     * Removes a hasEngine property value.<p>
     * 
     * @param oldHasEngine the hasEngine property value to be removed.
     */
    void removeHasEngine(Engine oldHasEngine);


    /* ***************************************************
     * Property http://claraweb.jlab.org/ontology/2015/11/ClaraOL#hasIdentity
     */
     
    /**
     * Gets all property values for the hasIdentity property.<p>
     * 
     * @return a collection of values for the hasIdentity property.
     */
    Collection<? extends Identity> getHasIdentity();

    /**
     * Checks if the class has a hasIdentity property value.<p>
     * 
     * @return true if there is a hasIdentity property value.
     */
    boolean hasHasIdentity();

    /**
     * Adds a hasIdentity property value.<p>
     * 
     * @param newHasIdentity the hasIdentity property value to be added
     */
    void addHasIdentity(Identity newHasIdentity);

    /**
     * Removes a hasIdentity property value.<p>
     * 
     * @param oldHasIdentity the hasIdentity property value to be removed.
     */
    void removeHasIdentity(Identity oldHasIdentity);


    /* ***************************************************
     * Property http://claraweb.jlab.org/ontology/2015/11/ClaraOL#hasLink
     */
     
    /**
     * Gets all property values for the hasLink property.<p>
     * 
     * @return a collection of values for the hasLink property.
     */
    Collection<? extends ConditionalRouting> getHasLink();

    /**
     * Checks if the class has a hasLink property value.<p>
     * 
     * @return true if there is a hasLink property value.
     */
    boolean hasHasLink();

    /**
     * Adds a hasLink property value.<p>
     * 
     * @param newHasLink the hasLink property value to be added
     */
    void addHasLink(ConditionalRouting newHasLink);

    /**
     * Removes a hasLink property value.<p>
     * 
     * @param oldHasLink the hasLink property value to be removed.
     */
    void removeHasLink(ConditionalRouting oldHasLink);


    /* ***************************************************
     * Property http://claraweb.jlab.org/ontology/2015/11/ClaraOL#hasState
     */
     
    /**
     * Gets all property values for the hasState property.<p>
     * 
     * @return a collection of values for the hasState property.
     */
    Collection<? extends State> getHasState();

    /**
     * Checks if the class has a hasState property value.<p>
     * 
     * @return true if there is a hasState property value.
     */
    boolean hasHasState();

    /**
     * Adds a hasState property value.<p>
     * 
     * @param newHasState the hasState property value to be added
     */
    void addHasState(State newHasState);

    /**
     * Removes a hasState property value.<p>
     * 
     * @param oldHasState the hasState property value to be removed.
     */
    void removeHasState(State oldHasState);


    /* ***************************************************
     * Property http://claraweb.jlab.org/ontology/2015/11/ClaraOL#requiresConfig
     */
     
    /**
     * Gets all property values for the requiresConfig property.<p>
     * 
     * @return a collection of values for the requiresConfig property.
     */
    Collection<? extends ServiceConfig> getRequiresConfig();

    /**
     * Checks if the class has a requiresConfig property value.<p>
     * 
     * @return true if there is a requiresConfig property value.
     */
    boolean hasRequiresConfig();

    /**
     * Adds a requiresConfig property value.<p>
     * 
     * @param newRequiresConfig the requiresConfig property value to be added
     */
    void addRequiresConfig(ServiceConfig newRequiresConfig);

    /**
     * Removes a requiresConfig property value.<p>
     * 
     * @param oldRequiresConfig the requiresConfig property value to be removed.
     */
    void removeRequiresConfig(ServiceConfig oldRequiresConfig);


    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
