/*
 *   Copyright (c) 2016.  Jefferson Lab (JLab). All rights reserved. Permission
 *   to use, copy, modify, and distribute  this software and its documentation for
 *   educational, research, and not-for-profit purposes, without fee and without a
 *   signed licensing agreement.
 *
 *   IN NO EVENT SHALL JLAB BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL
 *   INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING
 *   OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF JLAB HAS
 *   BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *   JLAB SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 *   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *   PURPOSE. THE CLARA SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY,
 *   PROVIDED HEREUNDER IS PROVIDED "AS IS". JLAB HAS NO OBLIGATION TO PROVIDE
 *   MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 *
 *   This software was developed under the United States Government license.
 *   For more information contact author at gurjyan@jlab.org
 *   Department of Experimental Nuclear Physics, Jefferson Lab.
 */

package org.jlab.clara.claraol;


import org.jlab.clara.claraol.impl.*;
import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;
import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

import java.util.Collection;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: ColFactory<br>
 * @version generated on Sat Jan 30 17:43:59 EST 2016 by gurjyan
 */
public class ColFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    {
        javaMapping.add("http://claraweb.jlab.org/ontology/2015/11/ClaraOL#Action", Action.class, DefaultAction.class);
    }

    {
        javaMapping.add("http://claraweb.jlab.org/ontology/2015/11/ClaraOL#Application", Application.class, DefaultApplication.class);
    }

    {
        javaMapping.add("http://claraweb.jlab.org/ontology/2015/11/ClaraOL#Condition", Condition.class, DefaultCondition.class);
    }

    {
        javaMapping.add("http://claraweb.jlab.org/ontology/2015/11/ClaraOL#DataSet", DataSet.class, DefaultDataSet.class);
    }

    {
        javaMapping.add("http://claraweb.jlab.org/ontology/2015/11/ClaraOL#DataSource", DataSource.class, DefaultDataSource.class);
    }

    {
        javaMapping.add("http://claraweb.jlab.org/ontology/2015/11/ClaraOL#Engine", Engine.class, DefaultEngine.class);
    }

    {
        javaMapping.add("http://claraweb.jlab.org/ontology/2015/11/ClaraOL#EngineConfig", EngineConfig.class, DefaultEngineConfig.class);
    }

    {
        javaMapping.add("http://claraweb.jlab.org/ontology/2015/11/ClaraOL#Identity", Identity.class, DefaultIdentity.class);
    }

    {
        javaMapping.add("http://claraweb.jlab.org/ontology/2015/11/ClaraOL#Orchestrator", Orchestrator.class, DefaultOrchestrator.class);
    }

    {
        javaMapping.add("http://claraweb.jlab.org/ontology/2015/11/ClaraOL#Service", Service.class, DefaultService.class);
    }

    /* ***************************************************
     * Class http://claraweb.jlab.org/ontology/2015/11/ClaraOL#Action
     */

    {
        javaMapping.add("http://claraweb.jlab.org/ontology/2015/11/ClaraOL#ServiceConfig", ServiceConfig.class, DefaultServiceConfig.class);
    }

    {
        javaMapping.add("http://claraweb.jlab.org/ontology/2015/11/ClaraOL#State", State.class, DefaultState.class);
    }

    public ColFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }

    public ColFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }


    /* ***************************************************
     * Class http://claraweb.jlab.org/ontology/2015/11/ClaraOL#Application
     */

    public OWLOntology getOwlOntology() {
        return ontology;
    }

    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }

    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }

    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }


    /* ***************************************************
     * Class http://claraweb.jlab.org/ontology/2015/11/ClaraOL#Condition
     */

    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }

    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }

    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }

    public CodeGenerationInference getInference() {
        return inference;
    }


    /* ***************************************************
     * Class http://claraweb.jlab.org/ontology/2015/11/ClaraOL#DataSet
     */

    /**
     * Creates an instance of type Action.  Modifies the underlying ontology.
     */
    public Action createAction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ACTION, DefaultAction.class);
    }

    /**
     * Gets an instance of type Action with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Action getAction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ACTION, DefaultAction.class);
    }

    /**
     * Gets all instances of Action from the ontology.
     */
    public Collection<? extends Action> getAllActionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ACTION, DefaultAction.class);
    }

    /**
     * Creates an instance of type Application.  Modifies the underlying ontology.
     */
    public Application createApplication(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_APPLICATION, DefaultApplication.class);
    }


    /* ***************************************************
     * Class http://claraweb.jlab.org/ontology/2015/11/ClaraOL#DataSource
     */

    /**
     * Gets an instance of type Application with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Application getApplication(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_APPLICATION, DefaultApplication.class);
    }

    /**
     * Gets all instances of Application from the ontology.
     */
    public Collection<? extends Application> getAllApplicationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_APPLICATION, DefaultApplication.class);
    }

    /**
     * Creates an instance of type Condition.  Modifies the underlying ontology.
     */
    public Condition createCondition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONDITION, DefaultCondition.class);
    }

    /**
     * Gets an instance of type Condition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Condition getCondition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONDITION, DefaultCondition.class);
    }


    /* ***************************************************
     * Class http://claraweb.jlab.org/ontology/2015/11/ClaraOL#Engine
     */

    /**
     * Gets all instances of Condition from the ontology.
     */
    public Collection<? extends Condition> getAllConditionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONDITION, DefaultCondition.class);
    }

    /**
     * Creates an instance of type DataSet.  Modifies the underlying ontology.
     */
    public DataSet createDataSet(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATASET, DefaultDataSet.class);
    }

    /**
     * Gets an instance of type DataSet with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DataSet getDataSet(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATASET, DefaultDataSet.class);
    }

    /**
     * Gets all instances of DataSet from the ontology.
     */
    public Collection<? extends DataSet> getAllDataSetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATASET, DefaultDataSet.class);
    }


    /* ***************************************************
     * Class http://claraweb.jlab.org/ontology/2015/11/ClaraOL#EngineConfig
     */

    /**
     * Creates an instance of type DataSource.  Modifies the underlying ontology.
     */
    public DataSource createDataSource(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATASOURCE, DefaultDataSource.class);
    }

    /**
     * Gets an instance of type DataSource with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DataSource getDataSource(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATASOURCE, DefaultDataSource.class);
    }

    /**
     * Gets all instances of DataSource from the ontology.
     */
    public Collection<? extends DataSource> getAllDataSourceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATASOURCE, DefaultDataSource.class);
    }

    /**
     * Creates an instance of type Engine.  Modifies the underlying ontology.
     */
    public Engine createEngine(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENGINE, DefaultEngine.class);
    }


    /* ***************************************************
     * Class http://claraweb.jlab.org/ontology/2015/11/ClaraOL#Identity
     */

    /**
     * Gets an instance of type Engine with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Engine getEngine(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENGINE, DefaultEngine.class);
    }

    /**
     * Gets all instances of Engine from the ontology.
     */
    public Collection<? extends Engine> getAllEngineInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENGINE, DefaultEngine.class);
    }

    /**
     * Creates an instance of type EngineConfig.  Modifies the underlying ontology.
     */
    public EngineConfig createEngineConfig(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENGINECONFIG, DefaultEngineConfig.class);
    }

    /**
     * Gets an instance of type EngineConfig with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public EngineConfig getEngineConfig(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENGINECONFIG, DefaultEngineConfig.class);
    }


    /* ***************************************************
     * Class http://claraweb.jlab.org/ontology/2015/11/ClaraOL#Orchestrator
     */

    /**
     * Gets all instances of EngineConfig from the ontology.
     */
    public Collection<? extends EngineConfig> getAllEngineConfigInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENGINECONFIG, DefaultEngineConfig.class);
    }

    /**
     * Creates an instance of type Identity.  Modifies the underlying ontology.
     */
    public Identity createIdentity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IDENTITY, DefaultIdentity.class);
    }

    /**
     * Gets an instance of type Identity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Identity getIdentity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IDENTITY, DefaultIdentity.class);
    }

    /**
     * Gets all instances of Identity from the ontology.
     */
    public Collection<? extends Identity> getAllIdentityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IDENTITY, DefaultIdentity.class);
    }


    /* ***************************************************
     * Class http://claraweb.jlab.org/ontology/2015/11/ClaraOL#Service
     */

    /**
     * Creates an instance of type Orchestrator.  Modifies the underlying ontology.
     */
    public Orchestrator createOrchestrator(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ORCHESTRATOR, DefaultOrchestrator.class);
    }

    /**
     * Gets an instance of type Orchestrator with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Orchestrator getOrchestrator(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ORCHESTRATOR, DefaultOrchestrator.class);
    }

    /**
     * Gets all instances of Orchestrator from the ontology.
     */
    public Collection<? extends Orchestrator> getAllOrchestratorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ORCHESTRATOR, DefaultOrchestrator.class);
    }

    /**
     * Creates an instance of type Service.  Modifies the underlying ontology.
     */
    public Service createService(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SERVICE, DefaultService.class);
    }


    /* ***************************************************
     * Class http://claraweb.jlab.org/ontology/2015/11/ClaraOL#ServiceConfig
     */

    /**
     * Gets an instance of type Service with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Service getService(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SERVICE, DefaultService.class);
    }

    /**
     * Gets all instances of Service from the ontology.
     */
    public Collection<? extends Service> getAllServiceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SERVICE, DefaultService.class);
    }

    /**
     * Creates an instance of type ServiceConfig.  Modifies the underlying ontology.
     */
    public ServiceConfig createServiceConfig(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SERVICECONFIG, DefaultServiceConfig.class);
    }

    /**
     * Gets an instance of type ServiceConfig with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ServiceConfig getServiceConfig(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SERVICECONFIG, DefaultServiceConfig.class);
    }


    /* ***************************************************
     * Class http://claraweb.jlab.org/ontology/2015/11/ClaraOL#State
     */

    /**
     * Gets all instances of ServiceConfig from the ontology.
     */
    public Collection<? extends ServiceConfig> getAllServiceConfigInstances() {
        return delegate.getWrappedIndividuals(Vocabulary.CLASS_SERVICECONFIG, DefaultServiceConfig.class);
    }

    /**
     * Creates an instance of type State.  Modifies the underlying ontology.
     */
    public State createState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STATE, DefaultState.class);
    }

    /**
     * Gets an instance of type State with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public State getState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STATE, DefaultState.class);
    }

    /**
     * Gets all instances of State from the ontology.
     */
    public Collection<? extends State> getAllStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STATE, DefaultState.class);
    }


}
