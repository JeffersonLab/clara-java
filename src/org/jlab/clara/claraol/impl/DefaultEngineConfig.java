package claraol.impl;

import claraol.*;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;

import org.protege.owl.codegeneration.inference.CodeGenerationInference;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;


/**
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: DefaultEngineConfig <br>
 * @version generated on Sat Jan 30 17:43:59 EST 2016 by gurjyan
 */
public class DefaultEngineConfig extends WrappedIndividualImpl implements EngineConfig {

    public DefaultEngineConfig(CodeGenerationInference inference, IRI iri) {
        super(inference, iri);
    }





    /* ***************************************************
     * Object Property http://claraweb.jlab.org/ontology/2015/11/ClaraOL#hasInputData
     */
     
    public Collection<? extends DataSource> getHasInputData() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASINPUTDATA,
                                               DefaultDataSource.class);
    }

    public boolean hasHasInputData() {
	   return !getHasInputData().isEmpty();
    }

    public void addHasInputData(DataSource newHasInputData) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASINPUTDATA,
                                       newHasInputData);
    }

    public void removeHasInputData(DataSource oldHasInputData) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASINPUTDATA,
                                          oldHasInputData);
    }


    /* ***************************************************
     * Object Property http://claraweb.jlab.org/ontology/2015/11/ClaraOL#hasOutputData
     */
     
    public Collection<? extends DataSource> getHasOutputData() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASOUTPUTDATA,
                                               DefaultDataSource.class);
    }

    public boolean hasHasOutputData() {
	   return !getHasOutputData().isEmpty();
    }

    public void addHasOutputData(DataSource newHasOutputData) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASOUTPUTDATA,
                                       newHasOutputData);
    }

    public void removeHasOutputData(DataSource oldHasOutputData) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASOUTPUTDATA,
                                          oldHasOutputData);
    }


}
