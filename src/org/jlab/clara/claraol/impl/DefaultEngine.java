package claraol.impl;

import claraol.*;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;

import org.protege.owl.codegeneration.inference.CodeGenerationInference;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;


/**
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: DefaultEngine <br>
 * @version generated on Sat Jan 30 12:43:23 EST 2016 by gurjyan
 */
public class DefaultEngine extends WrappedIndividualImpl implements Engine {

    public DefaultEngine(CodeGenerationInference inference, IRI iri) {
        super(inference, iri);
    }





    /* ***************************************************
     * Object Property http://claraweb.jlab.org/ontology/2015/11/ClaraOL#hasIdentity
     */
     
    public Collection<? extends Identity> getHasIdentity() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASIDENTITY,
                                               DefaultIdentity.class);
    }

    public boolean hasHasIdentity() {
	   return !getHasIdentity().isEmpty();
    }

    public void addHasIdentity(Identity newHasIdentity) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASIDENTITY,
                                       newHasIdentity);
    }

    public void removeHasIdentity(Identity oldHasIdentity) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASIDENTITY,
                                          oldHasIdentity);
    }


    /* ***************************************************
     * Object Property http://claraweb.jlab.org/ontology/2015/11/ClaraOL#needsConfiguation
     */
     
    public Collection<? extends EngineConfig> getNeedsConfiguation() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_NEEDSCONFIGUATION,
                                               DefaultEngineConfig.class);
    }

    public boolean hasNeedsConfiguation() {
	   return !getNeedsConfiguation().isEmpty();
    }

    public void addNeedsConfiguation(EngineConfig newNeedsConfiguation) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_NEEDSCONFIGUATION,
                                       newNeedsConfiguation);
    }

    public void removeNeedsConfiguation(EngineConfig oldNeedsConfiguation) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_NEEDSCONFIGUATION,
                                          oldNeedsConfiguation);
    }


    /* ***************************************************
     * Data Property http://claraweb.jlab.org/ontology/2015/11/ClaraOL#hasLibrary
     */
     
    public Collection<? extends String> getHasLibrary() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASLIBRARY, String.class);
    }

    public boolean hasHasLibrary() {
		return !getHasLibrary().isEmpty();
    }

    public void addHasLibrary(String newHasLibrary) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASLIBRARY, newHasLibrary);
    }

    public void removeHasLibrary(String oldHasLibrary) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASLIBRARY, oldHasLibrary);
    }


    /* ***************************************************
     * Data Property http://claraweb.jlab.org/ontology/2015/11/ClaraOL#hasLibraryPath
     */
     
    public Collection<? extends String> getHasLibraryPath() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASLIBRARYPATH, String.class);
    }

    public boolean hasHasLibraryPath() {
		return !getHasLibraryPath().isEmpty();
    }

    public void addHasLibraryPath(String newHasLibraryPath) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASLIBRARYPATH, newHasLibraryPath);
    }

    public void removeHasLibraryPath(String oldHasLibraryPath) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASLIBRARYPATH, oldHasLibraryPath);
    }


}
