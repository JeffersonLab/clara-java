apply plugin: 'java'
apply plugin: 'maven'

apply plugin: 'eclipse'
apply plugin: 'idea'


archivesBaseName = 'jclara'
group = 'org.jlab.coda'
version = '1.1'

defaultTasks 'build'


sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }
    test {
        java {
            srcDir 'test'
        }
    }
}


repositories {
    mavenLocal()
    maven {
        url 'https://userweb.jlab.org/~smancill/repo/'
    }
    mavenCentral()
}


dependencies {
    compile 'org.jlab.coda:xmsg:1.0.1'
}



task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


artifacts {
    archives javadocJar
    archives sourcesJar
}



def deploySpec = copySpec {
    into ('lib') {
        from configurations.runtime
        from "${jar.archivePath}"
    }

    from ("${project.rootDir}/scripts/unix") {
        into 'bin'
        fileMode 0755
    }
}


task distSources(type: Tar, dependsOn: build) {
    extension = 'tar.gz'
    classifier = 'src'
    compression = Compression.GZIP

    into "${baseName}-${version}-${classifier}"
    from "${project.rootDir}/build.gradle"
    from "${project.rootDir}/build.xml"
    from ("${project.rootDir}/src") {
        into 'src'
    }
    from ("${project.rootDir}/scripts") {
        into 'scripts'
    }
}


task distBinaries(type: Tar, dependsOn: build) {
    extension = 'tar.gz'
    compression = Compression.GZIP

    into "${baseName}-${version}"
    with deploySpec
}


task deploy(type: Copy, overwrite: true, dependsOn: jar) {
    def dest = "$System.env.CLARA_HOME"
    if (dest == "null") {
        throw new GradleException('CLARA_HOME not set')
    }
    def dir = new File(dest)
    dir.mkdirs()
    into dir
    with deploySpec
}



eclipse {
    classpath {
        defaultOutputDir = file("${buildDir}/eclipse-classes")
    }
}
