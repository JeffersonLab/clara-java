apply plugin: 'java'
apply plugin: 'maven'

apply plugin: 'checkstyle'
apply plugin: "findbugs"

apply plugin: 'eclipse'
apply plugin: 'idea'


archivesBaseName = 'jclara'
group = 'org.jlab.coda'
version = '4.3-SNAPSHOT'

defaultTasks 'build'

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}


configurations {
    provided {
        transitive = true
    }
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
    test {
        java {
            srcDir 'test'
        }
        resources {
            srcDir 'test'
            include "resources/**"
        }
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
}


repositories {
    mavenLocal()
    maven {
        url 'http://clasweb.jlab.org/clas12maven/'
    }
    mavenCentral()
}


dependencies {
    compile 'org.jlab.coda:xmsg:2.3-SNAPSHOT'
    compile 'net.sf.jopt-simple:jopt-simple:4.9'
    compile 'org.yaml:snakeyaml:1.16'
    compile 'org.json:json:20160212'
    compile 'com.google.code.findbugs:jsr305:3.0.0'
    testCompile 'junit:junit:4.+'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile "org.mockito:mockito-core:1.+"
}



javadoc {
    options.charSet = "utf8"
    options.encoding = "utf8"
    options.docEncoding = "utf8"
    options.links("http://docs.oracle.com/javase/8/docs/api/")
    include "org/jlab/clara/base/**"
    include "org/jlab/clara/engine/**"
    include "org/jlab/clara/sys/**"
    exclude "org/jlab/clara/base/core/**"
    exclude "org/jlab/clara/sys/ccc/**"
    classpath += configurations.provided
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


artifacts {
    archives javadocJar
    archives sourcesJar
}


if (!project.hasProperty("localPublicationRepo")) {
    ext.localPublicationRepo = "file://localhost/tmp/repo"
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: localPublicationRepo)
        }
    }
}



task(startDpe, dependsOn: 'classes', type: JavaExec) {
    main = 'org.jlab.clara.sys.Dpe'
    classpath = sourceSets.main.runtimeClasspath
    if ( project.hasProperty("dpeArgs") ) {
        args Eval.me(dpeArgs)
    }
    errorOutput = System.out
}


task(orInteractive, dependsOn: 'classes', type: JavaExec) {
    main = 'org.jlab.clara.examples.orchestrators.OrInteractive'
    classpath = sourceSets.main.runtimeClasspath
    if ( project.hasProperty("orArgs") ) {
        args Eval.me(orArgs)
    }
    standardInput = System.in
    errorOutput = System.out
}


task(runCommands, dependsOn: 'classes', type: JavaExec) {
    main = 'org.jlab.clara.base.core.CommandDebugger'
    classpath = sourceSets.main.runtimeClasspath
    if ( project.hasProperty("cmdDbgArgs") ) {
        args Eval.me(cmdDbgArgs)
    }
    standardInput = System.in
    errorOutput = System.out
}


task(listenReports, dependsOn: 'classes', type: JavaExec) {
    main = 'org.jlab.clara.sys.DpeReportTest'
    classpath = sourceSets.test.runtimeClasspath
    if ( project.hasProperty("listRepArgs") ) {
        args Eval.me(listRepArgs)
    }
    errorOutput = System.out
}



def deploySpec = copySpec {
    into ('lib') {
        from configurations.runtime
        from "${jar.archivePath}"
    }

    from ("${projectDir}/scripts/unix") {
        into 'bin'
        fileMode 0755
    }

    // trick Gradle to "create" empy directories
    def tempDir = new File(buildDir, "distributions/clara_home")

    new File("${tempDir}/log").mkdirs()
    new File("${tempDir}/plugins").mkdirs()

    from (tempDir)
}


task distSources(type: Tar, dependsOn: build) {
    extension = 'tar.gz'
    classifier = 'src'
    compression = Compression.GZIP

    into "${baseName}-${version}-${classifier}"
    from "${projectDir}/build.gradle"
    from "${projectDir}/gradlew"
    from "${projectDir}/gradlew.bat"
    from ("${projectDir}/config") {
        into 'config'
    }
    from ("${projectDir}/gradle") {
        into 'gradle'
    }
    from ("${projectDir}/scripts") {
        into 'scripts'
    }
    from ("${projectDir}/src") {
        into 'src'
    }
    from ("${projectDir}/test") {
        into 'test'
    }
}


task distBinaries(type: Tar, dependsOn: build) {
    extension = 'tar.gz'
    compression = Compression.GZIP

    into "${baseName}-${version}"
    with deploySpec
}


task deploy(type: Copy, overwrite: true, dependsOn: jar) {
    def dest = "$System.env.CLARA_HOME"
    def dir = new File(dest)

    into dir
    with deploySpec

    doFirst {
        if (dest == "null") {
            throw new GradleException('CLARA_HOME not set')
        }
        dir.mkdirs()
    }
}



checkstyle {
    toolVersion = "6.14"
    configFile = new File(projectDir, "config/quality/checkstyle.xml")
    configProperties['samedir'] = new File(project.projectDir, "config/quality")
}

findbugs {
    toolVersion = "3.0.1"
    ignoreFailures = true
    effort = "default"
    reportLevel = "medium"
    excludeFilter = new File(projectDir, "config/quality/findbugs-exclude.xml")
}

task checkstyleHtml << {
    ant.xslt(in: checkstyleMain.reports.xml.destination,
             style: new File(projectDir, 'config/quality/checkstyle-noframes-sorted.xsl'),
             out: new File(checkstyleMain.reports.xml.destination.parent, 'main.html'))
}

checkstyleMain.finalizedBy checkstyleHtml

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// Marker task to enable findbugs.
task findbugs(
    group: "Verification",
    description: "Marker task to enabled findbugs."
)

gradle.taskGraph.whenReady { taskGraph ->
    tasks.findbugsMain.onlyIf {
        taskGraph.hasTask((tasks.findbugs))
    }
    tasks.findbugsTest.onlyIf {
        taskGraph.hasTask((tasks.findbugs))
    }
}



eclipse {
    classpath {
        defaultOutputDir = file("${buildDir}/eclipse-classes")
        plusConfigurations += [ configurations.provided ]
    }
}

idea {
    module {
        scopes.COMPILE.plus += [configurations.provided]
    }
}
