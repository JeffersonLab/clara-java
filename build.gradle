/*
 * Copyright (c) 2017.  Jefferson Lab (JLab). All rights reserved. Permission
 * to use, copy, modify, and distribute  this software and its documentation for
 * educational, research, and not-for-profit purposes, without fee and without a
 * signed licensing agreement.
 *
 * IN NO EVENT SHALL JLAB BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL
 * INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING
 * OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF JLAB HAS
 * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * JLAB SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE. THE CLARA SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY,
 * PROVIDED HEREUNDER IS PROVIDED "AS IS". JLAB HAS NO OBLIGATION TO PROVIDE
 * MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 *
 * This software was developed under the United States Government license.
 * For more information contact author at gurjyan@jlab.org
 * Department of Experimental Nuclear Physics, Jefferson Lab.
 */

plugins {
    id 'java-library'
    id 'maven'

    id 'checkstyle'
    id 'com.github.spotbugs' version '1.6.9'

    id 'eclipse'
    id 'idea'
}

group = 'org.jlab.coda'
archivesBaseName = 'jclara'
version = '4.3-SNAPSHOT'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

defaultTasks 'build'


configurations {
    all {
         resolutionStrategy.cacheChangingModulesFor 30, 'minutes'
    }
    deployerJars
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }
    test {
        java {
            srcDir 'test'
            exclude "resources/**"
        }
        resources {
            srcDir 'test/resources'
        }
    }
}

repositories {
    maven {
        url 'https://clasweb.jlab.org/clas12maven/'
    }
    mavenCentral()
}

dependencies {
    implementation 'org.jlab.coda:xmsg:2.4-SNAPSHOT'
    implementation 'org.yaml:snakeyaml:1.18'
    api 'org.json:json:20160810'
    api 'org.jline:jline:3.1.3'
    implementation 'org.apache.commons:commons-exec:1.3'
    implementation 'org.freemarker:freemarker:2.3.26-incubating'
    implementation 'net.sf.jopt-simple:jopt-simple:4.9'
    implementation 'com.google.code.findbugs:jsr305:3.0.1'
    implementation 'org.jlab.coda:jinflux:1.0-SNAPSHOT'
    deployerJars 'org.apache.maven.wagon:wagon-ssh-external:2.12'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.mockito:mockito-junit-jupiter:2.28.2'
}


tasks.withType(JavaCompile) {
    if (JavaVersion.current() > JavaVersion.VERSION_1_8) {
        options.compilerArgs += ['--release', '8']
    }
}

javadoc {
    options.charSet = 'utf8'
    options.encoding = 'utf8'
    options.docEncoding = 'utf8'

    include "org/jlab/clara/base/**"
    include "org/jlab/clara/engine/**"
    include "org/jlab/clara/std/**"
    include "org/jlab/clara/sys/**"
    exclude "org/jlab/clara/base/core/**"
    exclude "org/jlab/clara/sys/ccc/**"
}


task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

def runCommand(cmd) {
    try {
        return cmd.execute().text.trim()
    } catch (e) {
        return ''
    }
}

task generateVersionProperties {
    doLast {
        def propertiesFile = file("${buildDir}/resources/main/META-INF/version.properties")
        propertiesFile.parentFile.mkdirs()

        propertiesFile.write "version=${project.version}\n"
        propertiesFile.append "groupId=${project.group}\n"
        propertiesFile.append "artifactId=${project.archivesBaseName}\n"
        propertiesFile.append "builtBy=" + System.getProperty('user.name') + '\n'
        propertiesFile.append "builtJDK=" + System.getProperty('java.version') + '\n'

        def gitBranch = runCommand("git rev-parse --abbrev-ref HEAD")
        if (!gitBranch.isEmpty()) {
            propertiesFile.append "git.branch=${gitBranch}\n"
        }

        def gitRev = runCommand("git rev-parse --short=10 HEAD")
        if (!gitRev.isEmpty()) {
            propertiesFile.append "git.revision=${gitRev}\n"
        }

        def gitDescribe = runCommand("git describe --match=v[0-9]* --abbrev=10 HEAD")
        if (!gitDescribe.isEmpty()) {
            propertiesFile.append "git.describe=${gitDescribe}\n"
        }
    }
}

jar.dependsOn generateVersionProperties

artifacts {
    archives javadocJar
    archives sourcesJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: 'scpexe://clas12@jlabl1.jlab.org/group/clas/www/clasweb/html/clas12maven') {
                authentication(userName: 'clas12')
            }
        }
    }
}


test {
    testLogging {
        exceptionFormat = 'full'
    }
    useJUnitPlatform {
        excludeTags 'integration'
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform {
        includeTags 'integration'
    }
    testLogging {
        exceptionFormat = 'full'
    }
    outputs.upToDateWhen { false }
}


def deploySpec = copySpec {
    into ('lib') {
        from configurations.runtime
        from jar.archiveFile
    }

    from ('scripts/unix') {
        into 'bin'
        exclude 'etc'
        fileMode 0755
    }

    from ('scripts/lib') {
        into 'lib/clara'
        fileMode 0755
    }

    // trick Gradle to "create" empy directories
    def tempDir = "${buildDir}/distributions/clara_home"

    file("${tempDir}/log").mkdirs()
    file("${tempDir}/plugins").mkdirs()

    from tempDir
}

task distSources(type: Tar, dependsOn: build) {
    extension = 'tar.gz'
    classifier = 'src'
    compression = Compression.GZIP

    into "${baseName}-${version}-${classifier}"

    from 'README.md'
    from 'build.gradle'
    from 'gradlew'
    from 'gradlew.bat'

    from ('config') {
        into 'config'
    }
    from ('gradle') {
        into 'gradle'
    }
    from ('scripts') {
        into 'scripts'
    }
    from ('src') {
        into 'src'
    }
    from ('test') {
        into 'test'
    }
}

task distBinaries(type: Tar, dependsOn: build) {
    extension = 'tar.gz'
    compression = Compression.GZIP

    into "${baseName}-${version}"
    with deploySpec
}

task deploy(type: Copy, dependsOn: jar) {
    def dest = "$System.env.CLARA_HOME"

    into dest
    with deploySpec

    doFirst {
        if (dest == 'null') {
            throw new GradleException('CLARA_HOME not set')
        }
    }
}


ext.classPathCache = file("${buildDir}/tmp/classpath")
ext.testClassPathCache = file("${buildDir}/tmp/test_classpath")

task cacheClasspath {
    doLast {
        if (!classPathCache.isFile()) {
            classPathCache.parentFile.mkdirs()
            classPathCache.createNewFile()
        }
        classPathCache.write sourceSets.main.runtimeClasspath.asPath
        testClassPathCache.write sourceSets.test.runtimeClasspath.asPath
    }
}
cacheClasspath.inputs.files sourceSets.main.runtimeClasspath
cacheClasspath.inputs.files sourceSets.test.runtimeClasspath
cacheClasspath.outputs.files classPathCache
cacheClasspath.outputs.files testClassPathCache

task printClasspath {
    doLast {
        println classPathCache.text
    }
}

build.dependsOn cacheClasspath
printClasspath.dependsOn cacheClasspath


def ciMode() {
    if (hasProperty("ciMode")) {
        return ciMode.toBoolean()
    }
    return false
}

checkstyle {
    toolVersion = '8.22'
    configFile = file('config/quality/checkstyle.xml')
    configProperties['samedir'] = file('config/quality')
}

spotbugs {
    toolVersion = '3.1.12'
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'medium'
    excludeFilter = file('config/quality/findbugs-exclude.xml')
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    def useXml = ciMode()
    reports {
        xml.enabled = useXml
        html.enabled = !xml.enabled
    }
}

// Marker task to enable SpotBugs.
task spotbugs(
    group: 'Verification',
    description: 'Marker task to enable SpotBugs.'
)

task checkSpotBugsResults {
    doLast {
        def bugsFound = 0
        [spotbugsMain, spotbugsTest].forEach {
            bugsFound += printSpotBugs it.reports.xml.destination
        }
        if (bugsFound > 0) {
            throw new GradleException("$bugsFound SpotBugs rule violations were found.")
        }
    }
}

def printSpotBugs(File xml) {
    def slurped = new XmlSlurper().parse(xml)
    def bugs = slurped.BugInstance

    bugs.each { bug ->
        def line = bug.SourceLine
        logger.error "[SpotBugs] ${line.@sourcepath}:${line.@start}:${line.@end} [${bug.@type}]"
    }
    bugs.size()
}

if (ciMode()) {
    checkSpotBugsResults.mustRunAfter spotbugsMain, spotbugsTest
    check.dependsOn checkSpotBugsResults
}

gradle.taskGraph.whenReady { taskGraph ->
    tasks.spotbugsMain.onlyIf {
        taskGraph.hasTask((tasks.spotbugs))
    }
    tasks.spotbugsTest.onlyIf {
        taskGraph.hasTask((tasks.spotbugs))
    }
    tasks.checkSpotBugsResults.onlyIf {
        taskGraph.hasTask((tasks.spotbugs))
    }
}



eclipse {
    classpath {
        file {
            defaultOutputDir = file("${buildDir}/eclipse")
            whenMerged { classpath ->
                classpath.entries.each { source ->
                    if (source.kind == 'src' && source.hasProperty('output')) {
                        source.output = "${buildDir.getName()}/eclipse"
                    }
                }
            }
        }
    }
}
