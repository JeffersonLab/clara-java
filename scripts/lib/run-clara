#!/usr/bin/env bash

# Copyright (c) 2017.  Jefferson Lab (JLab). All rights reserved. Permission
# to use, copy, modify, and distribute  this software and its documentation for
# educational, research, and not-for-profit purposes, without fee and without a
# signed licensing agreement.
#
# IN NO EVENT SHALL JLAB BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL
# INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING
# OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF JLAB HAS
# BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# JLAB SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE. THE CLARA SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY,
# PROVIDED HEREUNDER IS PROVIDED "AS IS". JLAB HAS NO OBLIGATION TO PROVIDE
# MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
#
# This software was developed under the United States Government license.
# For more information contact author at gurjyan@jlab.org
# Department of Experimental Nuclear Physics, Jefferson Lab.

if [[ -z "$CLARA_HOME" ]]; then
    echo "CLARA_HOME is not defined. Exiting..."
    exit 1
fi

set -u


##############################################################################
# Functions
##############################################################################

function cleanup() {
    trap - EXIT SIGINT SIGTERM

    local orch_pid dpe_pid
    orch_pid=$(jobs -p %?orchestrator 2>/dev/null)
    if [[ -n "$orch_pid" ]]; then
        echo "Shutting down..."
        kill -TERM "$orch_pid"
        wait "$orch_pid"
    fi
    dpe_pid=$(jobs -p %?j_dpe 2>/dev/null)
    if [[ -n "$dpe_pid" ]]; then
        kill -TERM "$dpe_pid"
    fi

    # shellcheck disable=SC2046
    # kill -TERM $(jobs -p)
    wait
}

trap cleanup EXIT SIGINT SIGTERM

function define_dpe_port() {
    local ports
    ports=$(seq 7000 20 8000)
    if command -v shuf >/dev/null 2>&1; then
        ports=$(echo "$ports" | shuf)
    fi

    for port in $ports; do
        local ctrl_port=$((port + 2))
        if ! eval "exec 6<>/dev/tcp/127.0.0.1/$ctrl_port" 2> /dev/null; then
            fe_port=$port
            return
        fi
    done
    echo "could not find an available port"
    exit 1
}

function define_host_ip() {
    fe_host=127.0.0.1
    if command -v ip >/dev/null 2>&1; then
        fe_host=$(ip route get 1 | awk '{print $NF; exit}')
        return 0
    fi
    local ip line
    while IFS=$': \t' read -r -a line ;do
        [ -z "${line%inet}" ] &&
           ip=${line[${#line[1]}>4?1:2]} &&
           [ "${ip#127.0.0.1}" ] && fe_host=$ip && return 0
      done< <(LANG=C /sbin/ifconfig)
}

function get_num_cores() {
    getconf _NPROCESSORS_ONLN
}

function in_files_exists() {
    while IFS='' read -r name || [[ -n "$name" ]]; do
        if [ ! -f "$input_dir/$name" ]; then
            echo "Error: The file = $name does not exist";
            return 0
        fi
    done < "$file_list"
}


##############################################################################
# Get parameters
##############################################################################

host=$(hostname)
user=$(id -un)

fe_host=
fe_port=

input_dir=$CLARA_HOME/data/input
output_dir=$CLARA_HOME/data/output
stage_dir=

thread_num=$(get_num_cores)
session=${user}_clara

dpe_report=5
wait_dpe=2

while getopts "i:o:l:t:s:H:P:R:W:" OPTION; do
    case $OPTION in
        i)  input_dir=$OPTARG ;;
        o)  output_dir=$OPTARG ;;
        l)  stage_dir=$OPTARG ;;
        t)  thread_num=$OPTARG ;;
        s)  session=$OPTARG ;;
        H)  fe_host=$OPTARG ;;
        P)  fe_port=$OPTARG ;;
        R)  dpe_report=$OPTARG ;;
        W)  wait_dpe=$OPTARG ;;
        ?)  exit 1 ;;
    esac
done

shift $((OPTIND-1))

if [[ $# -ne 2 ]]; then
    echo "usage: run-clara [ OPTIONS ] <services.yaml> <files.list>"
    exit 1
fi

service_yaml=$1
file_list=$2

if [ ! -r "$service_yaml" ]; then
    echo "error: not such file: $service_yaml"
    exit 1
fi
if [ ! -r "$file_list" ]; then
    echo "error: not such file: $file_list"
    exit 1
fi

if [[ -z "$fe_host" ]]; then
    define_host_ip
fi
if [[ -z "$fe_port" ]]; then
    define_dpe_port
fi


##############################################################################
# Run CLARA
##############################################################################

fe_log_file=$CLARA_HOME/log/${host}_${session}_fe_dpe.log
or_log_file=$CLARA_HOME/log/${host}_${session}_orch.log

echo "========== Running Conditions ==========="
echo " Start time         = $(date)"
echo " CLARA distribution = $CLARA_HOME"
echo " Threads request    = $thread_num"
echo " Log file           = $fe_log_file"
if [[ -n "${JAVA_OPTS-}" ]]; then
    echo " JVM options        = $JAVA_OPTS"
fi
echo "========================================="
echo

# Run front-end
fe_name="${fe_host}%${fe_port}_java"

fe_args=()
fe_args+=(--host "$fe_host")
fe_args+=(--port "$fe_port")
fe_args+=(--session "$session")
fe_args+=(--max-cores "$thread_num")
fe_args+=(--max-sockets 5120)
fe_args+=(--report "$dpe_report")

"$CLARA_HOME"/bin/j_dpe "${fe_args[@]}" 2>&1 | tee "$fe_log_file" &
unset JAVA_OPTS

sleep "$wait_dpe"

# Run orchestrator
or_args=()
or_args+=(-F)
or_args+=(-f "$fe_name")
or_args+=(-s "$session")
or_args+=(-i "$input_dir")
or_args+=(-o "$output_dir")
or_args+=(-p "$thread_num")
or_args+=(-t "$thread_num")
if [[ -n "$stage_dir" ]]; then
    or_args+=(-L)
    or_args+=(-l "$stage_dir")
fi
or_args+=("$service_yaml")
or_args+=("$file_list")

"$CLARA_HOME"/bin/clara-orchestrator "${or_args[@]}" 2>&1 | tee "$or_log_file" &
main_pid=$!


##############################################################################
# Exit
##############################################################################

wait "${main_pid}"
